<!--<h3> Research</h3>-->
<summary><h3>Magnetohydrodynamics (MHD) Simulation</h3></summary>
<details open>
  <p>Over the summer of 2017, I worked on simulating MHD using discrete exterior calculus. Following <a href="https://arxiv.org/abs/1707.03227">this</a> paper by Kraus and Maj, I implemented a 2D MHD simulation in periodic domains. I then proved that the method conserves energy and cross-helicity, and I extended the method to domains with boundaries.</p>
  <p>Below are some results of the simulation. The magnetic field strength is visualized by a glowing effect. You can see the fluid carrying the magnetic field upwards, where it collides with the container's boundary and starts to flow sideways.</p>
  <center>
    <img data-src="images/MHD/plume10.jpg" width="20%"/>
    <img data-src="images/MHD/plume20.jpg" width="20%"/>
    <img data-src="images/MHD/plume30.jpg" width="20%"/>
  </center>
  <p>I implemented the algorithm in HoudiniFX, and used Houdini to render these images.</p>
</details>

<summary><h3>Variational Integrators for Pendula</h3></summary>
<details>
  <p>In the winter of 2016, I implemented a variational integrator for multiple pendula as a final project for a graphics class. I used the method of Marsden and West described <a href="https://www.cambridge.org/core/journals/acta-numerica/article/discrete-mechanics-and-variational-integrators/C8F45478A9290DEC24E63BB7FBE3CEB5">here</a> (also available <a href="http://www.cds.caltech.edu/~marsden/bib/2001/09-MaWe2001/MaWe2001.pdf">here</a>) to simulate a physical system with constraints.</p>
  <center>
    <img class="animated-gif" data-src="images/pendulum.gif" style="width:400px; max-width: 80%;"/>
  </center>
  Most of the work for this project was spent understanding the mathematical machinery that Marsden and West used to discretize classical mechanics. The algorithm was implemented in Mathematica.
</details>

<summary><h3>Discrete Differential Geometry</h3></summary>
<details>
  <p> Here are some interesting assignments that I implemented for a discrete differential geometry class in the fall of 2016.</p>
  <p> I computed the normal modes of the discrete Laplacian on the Stanford bunny. Here are the first 4.</p>
  <center>
      <div style="image_stack">
        <img data-src="images/DDG/eigenfunction0.png" width="200"/>
        <img data-src="images/DDG/eigenfunction1.png" width="200"/>
        <img data-src="images/DDG/eigenfunction2.png" width="200"/>
        <img data-src="images/DDG/eigenfunction3.png" width="200"/>
      </div>
  </center>
  <p> Using these normal modes, I numerically solved a Poisson equation to find the electric field induced by charges on the bunny's surface.</p>
  <center>
    <img data-src="images/DDG/poisson_solution.png" style="width: 400px; max-width: 80%"/>
  </center>

  I also used the cotan Laplacian to perform mean curvature flow on surfaces. This creates surfaces with minimal surface area.
  <center>
    <img data-src="images/DDG/Soap_Film.png" style="width: 400px; max-with: 80%;"/>
  </center>

  The largest project that I did in the class was computing smooth vector fields on surfaces using parallel transport via a trivial connection. I computed generators of the surface's homology using the tree-cotree algorithm. Then, I input the desired singularities and computed the Gaussian curvature on the surface. Using the Guassian curvature, I computed a trivial connection and then used the connection to transport the vector field across the surface.
  <center>
    <img data-src="images/DDG/bunny.png"        style="width: 400px; max-width: 80%;"/>
    <img data-src="images/DDG/triple_torus.png" style="width: 400px; max-width: 80%;"/>
    <img data-src="images/DDG/furry_cat.png"    style="width: 400px; max-width: 80%;"/>
  </center>
</details>

<summary><h3>Interval Analysis</h3></summary>
<details>
  <p>Recently, I've been working with Professor Alan Barr on using Interval Analysis to solve root-finding and minimization problems. Interval analysis is the technique of doing computations with intervals representing uncertainty instead of regular real numbers. This provided guaranteed bounds on the accuracy of your results. Our code is available on <a href="https://github.com/AlBarrCMS/interval-haskell">GitHub</a>.</p>
</details>
