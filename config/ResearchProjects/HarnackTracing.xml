<project>
    <title>Ray Tracing Harmonic Functions</title>
    <folder>harnack-tracing</folder>
    <key>harnack-tracing</key>
    <href>index.html</href>
    <doi>10.1145/3658201</doi>
    <img_small>Research/harnack-tracing/images/teaser-small.png</img_small>
    <img_large>Research/harnack-tracing/images/teaser.png<style>max-width: 400pt;</style></img_large>
    <authors>
        <author>
            <name>Mark Gillespie</name>
            <affiliation>Carnegie Mellon University</affiliation></author>
        <author>
            <name>Denise Yang</name>
            <href>https://www.linkedin.com/in/denise-yang-899b33179</href>
            <affiliation>Carnegie Mellon University<br/>&amp; Pixar Animation Studios</affiliation></author>
        <author>
            <name>Mario Botsch</name>
            <href>https://cg.cs.tu-dortmund.de/people/botsch_mario.html</href>
            <affiliation>TU Dortmund University</affiliation></author>
        <author>
            <name>Keenan Crane</name>
            <href>http://www.cs.cmu.edu/~kmcrane/</href>
            <affiliation>Carnegie Mellon University</affiliation></author>
    </authors>
    <venue>ACM Transactions on Graphics (SIGGRAPH&amp;nbsp;2024)</venue>
    <award><name>Best Paper (Honorable Mention)</name><href>https://blog.siggraph.org/2024/06/siggraph-2024-technical-papers-awards-best-papers-honorable-mentions-and-test-of-time.html/</href><description>top 1.5% of accepted papers.</description></award>
    <links>
        <link><name>pdf (11.2 mb)</name><href>Research/harnack-tracing/HarnackTracing.pdf</href></link>
        <link><name>code (ShaderToy)</name><href>https://www.shadertoy.com/playlist/dflXzN</href></link>
        <link><name>video (10 min)</name><href>https://youtu.be/oDwedIuqh5Q</href></link>
    </links>
    <more_links>
        <link><name>supplement (350 kb)</name><href>Research/harnack-tracing/HarnackTracingSupplement.pdf</href></link>
        <link><name>video (2 min)</name><href>https://www.youtube.com/watch?v=6j6WWzPV6aY</href></link>
        <link><name>video (30 min)</name><href>https://youtu.be/9h13FPuBvM8</href></link>
        <link><name>code (C<span class="cpp">++</span>)</name><href>https://github.com/MarkGillespie/harnack-blender</href></link>
        <link><name>poster (13 mb)</name><href>Research/harnack-tracing/harnack-tracing-poster.pdf</href></link>
    </more_links>
    <bibtex>Research/harnack-tracing/bib.txt</bibtex>
    <abstract_small>
        Sphere tracing is a classic algorithm for visualizing surfaces encoded by signed distance functions, which arise throughout visual computing. We introduce an analogous algorithm for <em>harmonic functions</em>, enabling a new range of possibilities. For instance, it can visualize reconstructions of point clouds (via Poisson surface reconstruction) or polygon soups (via generalized winding numbers) without any linear solves or mesh extraction. We also show applications to Riemann surfaces, nonplanar polygons, architectural grid shells, and Seifert surfaces of knots.
    </abstract_small>
    <abstract_big>
        Sphere tracing is a fast and high-quality method for visualizing surfaces encoded by signed distance functions (SDFs). We introduce a similar method for a completely different class of surfaces encoded by <em>harmonic functions</em>, opening up rich new possibilities for visual computing.  Our starting point is similar in spirit to sphere tracing: using conservative <em>Harnack bounds</em> on the growth of harmonic functions, we develop a <em>Harnack tracing</em> algorithm for visualizing level sets of harmonic functions, including those that are angle-valued and exhibit singularities.  The method takes much larger steps than naïve ray marching, avoids numerical issues common to generic root finding methods and, like sphere tracing, needs only perform pointwise evaluation of the function at each step.  For many use cases, the method is fast enough to run real time in a shader program.  We use it to visualize smooth surfaces directly from point clouds (via Poisson surface reconstruction) or polygon soup (via generalized winding numbers) without linear solves or mesh extraction.  We also use it to visualize nonplanar polygons (possibly with holes), surfaces from architectural geometry, mesh "exoskeletons", and key mathematical objects including knots, links, spherical harmonics, and Riemann surfaces.  Finally we show that, at least in theory, Harnack tracing provides an alternative mechanism for visualizing arbitrary implicit surfaces.
    </abstract_big>
    <panels>
        <panel>
            <title>Paper</title>
            <content>
                <a href="HarnackTracing.pdf" class="paper-preview">
                    <img src="images/preview.png" alt="preview"/><br/>
                    <span>pdf (11.2 mb)</span>
                </a>
            </content>
        </panel>
        <panel>
            <title>Supplement</title>
            <content>
                <a href="HarnackTracingSupplement.pdf" class="paper-preview">
                    <img src="images/supplement-preview.png" alt="preview"/><br/>
                    <span>pdf (350 kb)</span>
                </a>
            </content>
        </panel>
        <panel>
            <title>GLSL Examples</title>
            <content>
                Several examples in the paper were implemented as GLSL shaders in <a href="https://www.shadertoy.com/">ShaderToy</a>. You can find a complete list <a href="https://www.shadertoy.com/playlist/dflXzN">here</a>, but below are a few of my favorites:
                <div class="example_grid">
                    <div class="example_grid_entry">
                        <a href="https://www.shadertoy.com/view/DlSfWd">
                            <img src="images/RiemannSurfaces.png" style="width: 100%;"/>
                        </a>
                        <div class="caption">
                            <h4 style="margin: 0;">Riemann Surfaces</h4>
                            <a href="https://www.shadertoy.com/view/DlSfWd">https://www.shadertoy.com/view/DlSfWd</a><br/>
                            <em>Riemann surfaces are central objects of study in complex analysis. Much of their interesting behavior occurs at singular points, which pose problems for standard techniques, but are accurately resolved by Harnack tracing.</em>
                        </div>
                    </div>

                    <div class="example_grid_entry">
                        <a href="https://www.shadertoy.com/view/4cfXWs">
                            <img src="images/NonplanarPolygon.png" style="width: 50%; margin: auto;"/>
                        </a>
                        <div class="caption">
                            <h4 style="margin: 0;">Nonplanar Polygons</h4>
                            <a href="https://www.shadertoy.com/view/4cfXWs">https://www.shadertoy.com/view/4cfXWs</a><br/>
                            <em>A perennial question in computer graphics is how to interpret polygons whose vertices do not sit in a common plane. The ability to ray trace harmonic functions provides an elegant answer: we can visualize a nonplanar polygon as a level set of a harmonic function naturally associated to the polygon, namely, its (signed) solid angle.</em>
                        </div>
                    </div>

                    <div class="example_grid_entry">
                        <a href="https://www.shadertoy.com/view/mtcBDl">
                            <img src="images/PointCloud.png" style="width: 75%; margin: auto;"/>
                        </a>
                        <div class="caption">
                            <h4 style="margin: 0;">Point Cloud Reconstruction</h4>
                            <a href="https://www.shadertoy.com/view/mtcBDl">https://www.shadertoy.com/view/mtcBDl</a><br/>
                            <em>Given an oriented point cloud (left), we can directly visualize an interpolating surface (right). This procedure effectively shows the result of running the Poisson surface reconstruction algorithm of Kazhdan et al. [<a href="https://hhoppe.com/poissonrecon.pdf">2006</a>], without requiring any volumetric meshing or linear solves.</em>
                        </div>
                    </div>

                    <div class="example_grid_entry">
                        <a href="https://www.shadertoy.com/view/MffGzS">
                            <img src="images/Gyroid.png" style="width: 50%; margin: auto; margin-bottom: -2em;"/>
                        </a>
                        <div class="caption">
                            <h4 style="margin: 0;">Gyroid</h4>
                            <a href="https://www.shadertoy.com/view/MffGzS">https://www.shadertoy.com/view/MffGzS</a><br/>
                            <em>The gyroid is described by the zero level set of the function f(x, y, z) = sin(x) cos(y) + sin(y) cos(z) + sin(z) cos(x). Although this function is not harmonic, we can still ray trace its level sets by constructing a harmonic extension in four dimensions.</em>
                        </div>
                    </div>

                    <div class="example_grid_entry">
                        <a href="https://www.shadertoy.com/view/DdXyRj">
                        <img src="images/HypersphericalHarmonics.jpg" style="width: 75%; margin: auto;"/>
                        </a>
                        <div class="caption">
                            <h4 style="margin: 0;">Hyperspherical Harmonics</h4>
                            <a href="https://www.shadertoy.com/view/DdXyRj">https://www.shadertoy.com/view/DdXyRj</a><br/>
                            <em>We can also visualize “hyperspherical” harmonics: 4D harmonic polynomials restricted to the 3-sphere and mapped into R³ via stereographic projection.</em>
                        </div>
                    </div>
                </div>
            </content>
            <extra_classes>example_grid_container</extra_classes>
        </panel>
        <panel>
            <bibtex></bibtex>
        </panel>
        <panel>
            <title>Acknowledgements</title>
            <content>
                Thanks to Nicole Feng for help with Biot-Savart-based expressions for our surface normals, to Albert Chern for helpful discussion of the Biot-Savart law and random projections of curves, and to Andrea Tagliasacchi and Google Brain for supporting this work.  Figure 2 is based on an illustration by the last author. This work was funded by an NSF CAREER Award (IIS 1943123), NSF Award IIS 2212290, a Packard Fellowship and a gift from Google Brain. 
            </content>
        </panel>
        <panel>
            <title>Selected Figures</title>
            <content>
                <img src="images/figures/WeirdNonplanarPolygons.svg"/>
                <div class="caption">
                    Our nonplanar polygon definition automatically applies to difficult cases like polygons with holes <em>(left)</em>, or knotted boundaries <em>(right)</em>
                </div>
                <hr/>

                <img src="images/PointCloud.png" style="box-shadow: none;"/>
                <div class="caption">
                    Given an oriented point cloud (left), we can directly visualize an interpolating surface (right). This procedure effectively shows the result of running the Poisson surface reconstruction algorithm of Kazhdan et al. [<a href="https://hhoppe.com/poissonrecon.pdf">2006</a>], without requiring any volumetric meshing or linear solves.
                </div>
                <hr/>

                <img src="images/figures/Exoskeleton.svg"/>
                <div class="caption">
                    Given a sparse "exoskeleton" approximating a surface <em>(top left)</em> we can directly ray trace an interpolating surface <em>(top right)</em>.  The resulting image is both higher-quality than the simple triangulation used by most mesh viewers <em>(bottom left)</em>, and much simpler to compute than optimizing a mesh-based minimal surface, as originally proposed by de Goes <em>et al.</em> [<a href="https://doi.org/10.1016/j.cag.2010.11.012">2011</a>].
                </div>
                <hr/>

                <img src="images/figures/GWN.svg" style="box-shadow: none;"/>
                <div class="caption">
                    Given a surface mesh with imperfections such as holes <em>(left)</em>, we can directly visualize the repaired surface defined via the <em>generalized winding number</em> <em>(right)</em>, reproducing the example from Jacobson <em>et al.</em> [<a href="https://doi.org/10.1145/2461912.2461916">2013, Figure 1</a>].
                </div>
                <hr/>

                <img src="images/figures/Architecture.jpg"/>
                <div class="caption">
                    Here we use Harnack tracing to directly visualize a special class of <em>grid shells</em> used in architecture, reproducing examples from Adiels [<a href="https://arxiv.org/pdf/2212.05913.pdf">2022</a>] figures 11, 12, and 22 (<em>resp.</em>).  To do so, we extend our algorithm to handle circular holes in addition to polygons.
                </div>
                <hr/>
            </content>
            <extra_classes>figures</extra_classes>
        </panel>
    </panels>
</project>